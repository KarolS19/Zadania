CREATE TABLE Students (
    student_id INTEGER PRIMARY KEY,
    student_name TEXT
);

CREATE TABLE Groups (
    group_id INTEGER PRIMARY KEY,
    group_name TEXT
);

CREATE TABLE Lecturers (
    lecturer_id INTEGER PRIMARY KEY,
    lecturer_name TEXT
);

CREATE TABLE Subjects (
    subject_id INTEGER PRIMARY KEY,
    subject_name TEXT,
    lecturer_id INTEGER,
    FOREIGN KEY (lecturer_id) REFERENCES Lecturers(lecturer_id)
);

CREATE TABLE Grades (
    grade_id INTEGER PRIMARY KEY,
    student_id INTEGER,
    subject_id INTEGER,
    grade REAL,
    grade_date DATE,
    FOREIGN KEY (student_id) REFERENCES Students(student_id),
    FOREIGN KEY (subject_id) REFERENCES Subjects(subject_id)
);

CREATE TEMPORARY VIEW generate_series AS
WITH RECURSIVE series(n) AS (
  SELECT 1
  UNION ALL
  SELECT n+1 FROM series WHERE n < 1000
);

CREATE VIEW faker AS
SELECT
    (SELECT randomblob(8)) AS seed,
    (SELECT group_concat(x, ' ') FROM (SELECT printf('%X', (random() % 4096) + 1) AS x) t) AS name;

INSERT INTO Students (student_name) SELECT faker.name() FROM generate_series(1, 50);
INSERT INTO Groups (group_name) SELECT faker.name() FROM generate_series(1, 3);
INSERT INTO Lecturers (lecturer_name) SELECT faker.name() FROM generate_series(1, 5);

INSERT INTO Subjects (subject_name, lecturer_id) SELECT faker.name(), (SELECT lecturer_id FROM Lecturers ORDER BY RANDOM() LIMIT 1) FROM generate_series(1, 8);

INSERT INTO Grades (student_id, subject_id, grade, grade_date) 
SELECT 
    s.student_id,
    sub.subject_id,
    ROUND(RANDOM() * 4 + 2, 2), 
    DATE('now', '-' || ROUND(RANDOM() * 365, 0) || ' days') 
FROM 
    Students s
CROSS JOIN
    Subjects sub
WHERE
    RANDOM() < 0.4; 


SELECT 
    s.student_id,
    s.student_name,
    AVG(g.grade) AS average_grade
FROM 
    Students s
JOIN
    Grades g ON s.student_id = g.student_id
GROUP BY 
    s.student_id
ORDER BY 
    AVG(g.grade) DESC
LIMIT 5;

SELECT 
    s.student_id,
    s.student_name,
    AVG(g.grade) AS average_grade
FROM 
    Students s
JOIN
    Grades g ON s.student_id = g.student_id
JOIN
    Subjects sub ON g.subject_id = sub.subject_id
WHERE 
    sub.subject_name = 'Nazwa wybranego przedmiotu'
GROUP BY 
    s.student_id
ORDER BY 
    AVG(g.grade) DESC
LIMIT 1;